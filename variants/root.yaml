# An [otk](https://github.com/osbuild/otk) omnifest to build Fedora Minimal.
otk.version: "1"

# Include the general release information.
otk.include.release: "../release.yaml"

# Buildroot packages are shared amongst all images and usually architecture
# independent. Keeping the buildroot the same everywhere allows it to be
# cached efficiently as well.
otk.include.buildroot-packages: "../package-sets/buildroot/generic.yaml"

# System packages end up in the operating system itself, these are dependent
# on both architecture and spin.
otk.include.system-packages: "../package-sets/system/${environment.architecture}/root.yaml"

# Then we also need the partition tables that apply to this spin.
otk.include.partition-tables: "../partition-tables/${environment.architecture}/root.yaml"

# We're also going to place some custom files in the image that we need to have
# available, these are specific to the minimal spin so let's define them here.
otk.define.files:
  files:
    # The minimal spin has a kickstart file that turns on firstboot
    kickstart: |
      # Run initial-setup on first boot
      # Created by osbuild
      firstboot --reconfig
      lang en_US.UTF-8

    # TODO Let's upstream this as a stage?
    repart:
      esp: |
        [Partition]
        Type=esp
        SizeMinBytes=1G
        SizeMaxBytes=1G
        Format=vfat
      xbootldr: |
        [Partition]
        Type=xbootldr
        SizeMinBytes=500M
        SizeMaxBytes=500M
        Format=ext4
      root: |
        [Partition]
        Type=root
        Format=ext4
        SizeMinBytes=3G
        SizeMaxBytes=3G
      srv: |
        [Partition]
        Type=srv
        Format=ext4
        SizeMinBytes=1G

    # For osbuild we need to generate these files into sources that can embedded
    # in the resulting manifest so let's do that
    osbuild:
      otk.external.osbuild-gen-inline-files:
        inline:
          kickstart:
            contents: ${files.kickstart}
          repart_esp:
            contents: ${files.repart.esp}
          repart_xbootldr:
            contents: ${files.repart.xbootldr}
          repart_root:
            contents: ${files.repart.root}
          repart_srv:
            contents: ${files.repart.srv}

# TODO
otk.define.kernel:
  kernel:
    cmdline: ro
    package:
      otk.external.osbuild-get-dnf4-package-info:
        packageset: ${packages.system.osbuild}
        packagename: "kernel"

# With what we have available so far we can create a target for an
# [osbuild](https://github.com/osbuild/osbuild) manifest. Knowledge om the
# `osbuild` manifest format is required for working with the `osbuild` target
# but it allows fine grained control over the assembly of the eventual image.
#
# Each time we recompile this omnifest the target will be output with freshly
# depsolved information.
otk.target.osbuild:
  # Store some metadata about what built this manifest
  metadata:
    generators:
      - name: otk
        version:
          otk.external.osbuild-make-generator-metadata:

  pipelines:
    # The buildroot pipeline is shared amongst all images and is usually
    # architecture independent.
    - otk.include: "../library/osbuild/pipelines/buildroot/generic.yaml"

    # The system pipeline assembles the operating system together, generally
    # this can be shared but sometimes specifics apply.
    - otk.include: "../library/osbuild/pipelines/system/${environment.architecture}/root.yaml"

    # The next pipelines take the previous pipeline and convert it into a
    # variety of output formats.

    # A raw disk image
    - otk.include: "../library/osbuild/pipelines/raw/generic.yaml"

    # A raw disk image (compressed with xz)
    - name: raw-xz
      build: name:buildroot
      stages:
        - type: org.osbuild.xz
          inputs:
            file:
              type: org.osbuild.files
              origin: org.osbuild.pipeline
              references:
                name:raw:
                  file: disk.img
          options:
            filename: disk.raw.xz

    # A qcow2 disk image
    - otk.include: "../library/osbuild/pipelines/qcow2/generic.yaml"

    # A tar archive of the system directory tree
    - otk.include: "../library/osbuild/pipelines/tar/generic.yaml"

  # osbuild needs all its sources explicitly referenced, these sources are
  # in this case the RPMs that constitute the build. They are generated during
  # the dependency solving of the packages.
  sources:
    otk.op.join:
      values:
        - otk.external.osbuild-make-depsolve-dnf4-curl-source:
            packagesets:
              - ${packages.buildroot.osbuild}
              - ${packages.system.osbuild}
        - otk.external.osbuild-make-inline-source:
            const:
              files: ${files.osbuild.const.files}
